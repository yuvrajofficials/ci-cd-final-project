apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]* || true
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?* || true
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
    - name: source
  steps:
    - name: clone
      image: alpine/git
      script: |
        #!/bin/sh
        set -e
        echo "Cloning repository..."
        git clone https://github.com/FrostPrince003/ci-cd-final-project.git .  # Use your actual repository URL
        echo "Clone complete."

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8-linting
spec:
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose-tests
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-task
spec:
  workspaces:
    - name: source
  params:
    - name: image-name
      description: The name of the image to build
      type: string
      default: "my-image"  # Change this to a suitable default if necessary
  steps:
    - name: build-image
      image: registry.access.redhat.com/ubi8/buildah
      script: |
        #!/bin/bash
        set -e
        buildah bud -t $(params.image-name) .